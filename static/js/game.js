class RouletteGame {
    constructor() {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã...');
        
        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO
        this.socket = io({
            transports: ['polling', 'websocket'],
            upgrade: true,
            timeout: 20000,
            reconnection: true,
            reconnectionAttempts: 5,
            reconnectionDelay: 1000
        });
        
        this.userBalance = parseInt(document.getElementById('balance')?.textContent) || 1000;
        this.currentBet = null;
        this.spinAngle = 0;
        this.isConnected = false;
        
        this.initializeEventListeners();
        this.initializeSocketListeners();
        
        console.log('–ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    initializeEventListeners() {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π...');
        
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∞–º–∏
        document.querySelectorAll('.bet-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const type = e.target.dataset.type;
                this.setBetAmount(type);
            });
        });

        // –ö–Ω–æ–ø–∫–∏ —Ü–≤–µ—Ç–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
        document.querySelectorAll('.color-bet').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const color = e.target.dataset.color;
                console.log('–ü–æ–ø—ã—Ç–∫–∞ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞:', color);
                this.placeBet(color);
            });
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        document.querySelectorAll('.modal .close').forEach(closeBtn => {
            closeBtn.addEventListener('click', () => {
                closeBtn.closest('.modal').style.display = 'none';
            });
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–∫–Ω–∞
        window.addEventListener('click', (e) => {
            if (e.target.classList.contains('modal')) {
                e.target.style.display = 'none';
            }
        });
    }

    initializeSocketListeners() {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO...');
        
        this.socket.on('connect', () => {
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É');
            this.isConnected = true;
            this.showNotification('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success');
        });

        this.socket.on('disconnect', (reason) => {
            console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', reason);
            this.isConnected = false;
            this.showNotification('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ', 'error');
        });

        this.socket.on('connect_error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
        });

        this.socket.on('game_state', (data) => {
            console.log('üìä –ü–æ–ª—É—á–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã:', data);
            this.handleGameState(data);
        });

        this.socket.on('phase_change', (data) => {
            console.log('üîÑ –°–º–µ–Ω–∞ —Ñ–∞–∑—ã:', data);
            this.handlePhaseChange(data);
        });

        this.socket.on('time_update', (data) => {
            console.log('‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏:', data.time_left);
            this.updateTimer(data);
        });

        this.socket.on('bet_placed', (data) => {
            console.log('üí∞ –†–∞–∑–º–µ—â–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞:', data);
            this.handleBetPlaced(data);
        });

        this.socket.on('game_result', (data) => {
            console.log('üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã:', data);
            this.handleGameResult(data);
        });
    }

    handleGameState(data) {
        console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã:', data);
        this.updateHistory(data.history);
        if (data.current_bets) {
            this.displayCurrentBets(data.current_bets);
        }
    }

    handlePhaseChange(data) {
        console.log('–°–º–µ–Ω–∞ —Ñ–∞–∑—ã –Ω–∞:', data.phase);
        
        const phaseElement = document.getElementById('game-phase');
        const timerElement = document.getElementById('timer');
        const bettingPanel = document.querySelector('.betting-panel');
        
        if (phaseElement) {
            if (data.phase === 'betting') {
                phaseElement.textContent = '–í–†–ï–ú–Ø –°–¢–ê–í–û–ö';
                phaseElement.className = 'game-phase betting';
                if (bettingPanel) {
                    bettingPanel.style.pointerEvents = 'auto';
                    bettingPanel.style.opacity = '1';
                }
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
                this.currentBet = null;
                this.clearBetHighlight();
                console.log('üü¢ –°—Ç–∞–≤–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã');
            } else if (data.phase === 'spinning') {
                phaseElement.textContent = '–í–†–ê–©–ï–ù–ò–ï –†–£–õ–ï–¢–ö–ò';
                phaseElement.className = 'game-phase spinning';
                if (bettingPanel) {
                    bettingPanel.style.pointerEvents = 'none';
                    bettingPanel.style.opacity = '0.5';
                }
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ä—É–ª–µ—Ç–∫–∏
                if (data.result) {
                    console.log('üé∞ –ó–∞–ø—É—Å–∫ —Ä—É–ª–µ—Ç–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º:', data.result);
                    this.spinRoulette(data.result);
                }
                console.log('üî¥ –°—Ç–∞–≤–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã');
            }
        }
        
        if (timerElement) {
            timerElement.textContent = data.time_left;
        }
    }

    updateTimer(data) {
        const timerElement = document.getElementById('timer');
        if (timerElement) {
            timerElement.textContent = data.time_left;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–µ–∫—É–Ω–¥
            if (data.time_left <= 5) {
                timerElement.style.color = '#ff4757';
                timerElement.style.animation = 'pulse 1s infinite';
            } else {
                timerElement.style.color = '#ffd700';
                timerElement.style.animation = 'none';
            }
        }
    }

    handleBetPlaced(data) {
        console.log('–°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞:', data);
        this.showNotification(`${data.username} –ø–æ—Å—Ç–∞–≤–∏–ª ${data.amount} –Ω–∞ ${this.getColorName(data.bet_type)}`, 'info');
    }

    handleGameResult(data) {
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã:', data);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ (10 —Å–µ–∫—É–Ω–¥)
        setTimeout(() => {
            this.updateHistory(data.history);
            
            if (this.currentBet) {
                const isWin = this.currentBet.type === data.result;
                if (isWin) {
                    const multiplier = data.result === 'green' ? 14 : 2;
                    const winAmount = this.currentBet.amount * multiplier;
                    this.userBalance += winAmount;
                    this.updateBalance();
                    this.showWinModal(winAmount, data.winning_number);
                    this.createConfetti();
                    console.log('üéâ –í—ã–∏–≥—Ä–∞–ª:', winAmount);
                } else {
                    this.showLoseModal(data.winning_number);
                    console.log('üòû –ü—Ä–æ–∏–≥—Ä–∞–ª');
                }
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.showGameResult(data.result, data.winning_number);
            this.showWinningNumber(data.winning_number, data.result);

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É
            this.currentBet = null;
            this.clearBetHighlight();

        }, 10000); // 10 —Å–µ–∫—É–Ω–¥ - –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≤—Ä–∞—â–µ–Ω–∏—è
    }

    placeBet(color) {
        console.log('–ü–æ–ø—ã—Ç–∫–∞ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞:', color);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if (!this.isConnected) {
            this.showNotification('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
            return;
        }

        const amountElement = document.getElementById('bet-amount');
        if (!amountElement) {
            console.error('–≠–ª–µ–º–µ–Ω—Ç bet-amount –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const amount = parseInt(amountElement.textContent);
        console.log('–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏:', amount);
        
        if (amount > this.userBalance) {
            this.showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!', 'error');
            return;
        }

        if (this.currentBet) {
            this.showNotification('–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ!', 'error');
            return;
        }

        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
        
        fetch('/api/place_bet', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                bet_type: color,
                amount: amount
            })
        })
        .then(response => {
            console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status);
            return response.json();
        })
        .then(data => {
            console.log('–î–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
            if (data.success) {
                this.currentBet = { type: color, amount: amount };
                this.userBalance -= amount;
                this.updateBalance();
                this.highlightBet(color, amount);
                this.showNotification(data.message || '–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!', 'success');
            } else {
                this.showNotification(data.error, 'error');
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏', 'error');
        });
    }

    setBetAmount(type) {
        const betAmountElement = document.getElementById('bet-amount');
        if (!betAmountElement) return;
        
        const currentAmount = parseInt(betAmountElement.textContent);
        let newAmount = currentAmount;

        switch(type) {
            case 'min':
                newAmount = 10;
                break;
            case 'half':
                newAmount = Math.floor(currentAmount / 2);
                if (newAmount < 10) newAmount = 10;
                break;
            case 'double':
                newAmount = currentAmount * 2;
                break;
            case 'max':
                newAmount = this.userBalance;
                break;
        }

        betAmountElement.textContent = newAmount;
        console.log('–ù–æ–≤–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏:', newAmount);
    }

    spinRoulette(resultData) {
        console.log('–í—Ä–∞—â–µ–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–∏:', resultData);
        
        const wheel = document.getElementById('roulette-wheel');
        if (!wheel) {
            console.error('–≠–ª–µ–º–µ–Ω—Ç roulette-wheel –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–ª–∞—Å—Å—ã –∞–Ω–∏–º–∞—Ü–∏–∏
        wheel.classList.remove('spinning');

        // –ü–æ–ª—É—á–∞–µ–º —É–≥–æ–ª –≤—ã–ø–∞–≤—à–µ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞
        const targetAngle = resultData.angle || this.getAngleForNumber(resultData.number);
        const spins = 5; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —É–≥–æ–ª
        const finalAngle = (360 * spins) + (360 - targetAngle);

        console.log('–£–≥–æ–ª –≤—Ä–∞—â–µ–Ω–∏—è:', finalAngle);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        wheel.style.setProperty('--spin-degrees', `${finalAngle}deg`);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        setTimeout(() => {
            wheel.classList.add('spinning');
        }, 100);

        this.spinAngle = finalAngle % 360;
    }

    getAngleForNumber(number) {
        const angles = {
            1: 0, 2: 24, 3: 48, 4: 72, 0: 96,
            5: 120, 6: 144, 7: 168, 8: 192, 9: 216,
            10: 240, 11: 264, 12: 288, 13: 312, 14: 336
        };
        return angles[number] || 0;
    }

    showNotification(message, type = 'info') {
        console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ [${type}]:`, message);
        
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;

        notification.style.cssText = `
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            padding: 1rem 2rem;
            border-radius: 8px;
            font-weight: bold;
            z-index: 10000;
            animation: slideDown 0.3s ease;
        `;

        if (type === 'success') {
            notification.style.background = '#00ff88';
            notification.style.color = '#000';
        } else if (type === 'error') {
            notification.style.background = '#ff4757';
            notification.style.color = '#fff';
        } else {
            notification.style.background = '#ffd700';
            notification.style.color = '#000';
        }

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.remove();
        }, 3000);
    }

    highlightBet(color, amount) {
        console.log('–í—ã–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏:', color, amount);
        
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        this.clearBetHighlight();
        
        // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç–∞–≤–∫—É
        const colorBet = document.querySelector(`.color-bet[data-color="${color}"]`);
        if (colorBet) {
            colorBet.classList.add('selected');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞–≤–∫–∏
            const betIndicator = document.createElement('div');
            betIndicator.className = 'bet-indicator';
            betIndicator.textContent = amount;
            colorBet.appendChild(betIndicator);
        }
    }

    clearBetHighlight() {
        document.querySelectorAll('.color-bet').forEach(bet => {
            bet.classList.remove('selected');
            const indicator = bet.querySelector('.bet-indicator');
            if (indicator) {
                indicator.remove();
            }
        });
    }

    updateBalance() {
        const balanceElement = document.getElementById('balance');
        if (balanceElement) {
            balanceElement.textContent = this.userBalance;
        }
    }

    updateHistory(history) {
        const historyContainer = document.getElementById('history-list');
        if (!historyContainer || !history) return;

        historyContainer.innerHTML = '';
        
        history.slice(-10).forEach(item => {
            const historyItem = document.createElement('div');
            historyItem.className = `history-item ${item.result}`;
            historyItem.innerHTML = `
                <span class="history-number">${item.number}</span>
            `;
            historyContainer.appendChild(historyItem);
        });
    }

    showGameResult(result, number) {
        const resultElement = document.createElement('div');
        resultElement.className = `game-result-popup ${result}`;
        resultElement.innerHTML = `
            <div class="result-content">
                <h3>–í—ã–ø–∞–ª–æ: ${number}</h3>
                <div class="result-color-indicator ${result}"></div>
                <p>${this.getColorName(result).toUpperCase()}</p>
            </div>
        `;

        document.body.appendChild(resultElement);

        setTimeout(() => {
            resultElement.remove();
        }, 4000);
    }

    showWinningNumber(number, color) {
        const display = document.getElementById('winning-number');
        if (display) {
            const valueElement = display.querySelector('.winning-value');
            if (valueElement) {
                valueElement.textContent = number;
                valueElement.className = `winning-value ${color}`;
                display.style.display = 'block';
                
                setTimeout(() => {
                    display.style.display = 'none';
                }, 5000);
            }
        }
    }

    showWinModal(amount, number) {
        const modal = document.getElementById('win-modal');
        const winText = document.getElementById('win-text');
        if (modal && winText) {
            winText.textContent = `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã–ø–∞–ª–æ ${number}! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${amount} –º–æ–Ω–µ—Ç!`;
            modal.style.display = 'block';
        }
    }

    showLoseModal(number) {
        const modal = document.getElementById('lose-modal');
        const loseText = document.getElementById('lose-text');
        if (modal && loseText) {
            loseText.textContent = `–í—ã–ø–∞–ª–æ ${number}. –í —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –ø–æ–≤–µ–∑–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!`;
            modal.style.display = 'block';
        }
    }

    createConfetti() {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –¥–ª—è –ø–æ–±–µ–¥—ã
        for (let i = 0; i < 50; i++) {
            const confetti = document.createElement('div');
            confetti.className = 'confetti';
            confetti.style.cssText = `
                position: fixed;
                width: 10px;
                height: 10px;
                background: ${['#ff4757', '#ffd700', '#00ff88'][Math.floor(Math.random() * 3)]};
                left: ${Math.random() * 100}vw;
                top: -10px;
                z-index: 10000;
                animation: confetti-fall ${2 + Math.random() * 3}s linear forwards;
            `;
            
            document.body.appendChild(confetti);
            
            setTimeout(() => {
                confetti.remove();
            }, 5000);
        }
    }

    getColorName(color) {
        const colorNames = {
            'red': '–∫—Ä–∞—Å–Ω–æ–µ',
            'black': '—á–µ—Ä–Ω–æ–µ',
            'green': '–∑–µ–ª–µ–Ω–æ–µ'
        };
        return colorNames[color] || color;
    }

    displayCurrentBets(bets) {
        console.log('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Å—Ç–∞–≤–æ–∫:', bets);
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Å—Ç–∞–≤–æ–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
    // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏–∏
    const style = document.createElement('style');
    style.textContent = `
        @keyframes slideDown {
            from { transform: translate(-50%, -100%); opacity: 0; }
            to { transform: translate(-50%, 0); opacity: 1; }
        }
        
        @keyframes confetti-fall {
            0% { transform: translateY(0) rotate(0deg); opacity: 1; }
            100% { transform: translateY(100vh) rotate(360deg); opacity: 0; }
        }
        
        .bet-indicator {
            position: absolute;
            top: -10px;
            right: -10px;
            background: #ffd700;
            color: #000;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
            font-weight: bold;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
        }
        
        .color-bet.selected {
            box-shadow: 0 0 20px rgba(255, 215, 0, 0.8);
            transform: scale(1.05);
        }
        
        .game-result-popup {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.95);
            padding: 2rem;
            border-radius: 20px;
            text-align: center;
            z-index: 10000;
            animation: popIn 0.5s ease;
            border: 3px solid;
        }
        
        .game-result-popup.red { border-color: #ff4757; }
        .game-result-popup.black { border-color: #2f3542; }
        .game-result-popup.green { border-color: #00ff88; }
        
        .result-content h3 {
            margin: 0 0 1rem 0;
            font-size: 2rem;
            color: #fff;
        }
        
        .result-color-indicator {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            margin: 0 auto 1rem auto;
            border: 3px solid #fff;
        }
        
        .result-color-indicator.red { background: #ff4757; }
        .result-color-indicator.black { background: #2f3542; }
        .result-color-indicator.green { background: #00ff88; }
        
        .result-content p {
            margin: 0;
            font-size: 1.5rem;
            font-weight: bold;
            color: #ffd700;
        }
        
        @keyframes popIn {
            0% { transform: translate(-50%, -50%) scale(0.5); opacity: 0; }
            100% { transform: translate(-50%, -50%) scale(1); opacity: 1; }
        }
    `;
    document.head.appendChild(style);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const requiredElements = [
        'balance', 'bet-amount', 'game-phase', 'timer', 'roulette-wheel'
    ];
    
    const missingElements = requiredElements.filter(id => !document.getElementById(id));
    
    if (missingElements.length > 0) {
        console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã:', missingElements);
        alert('–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ HTML.');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞–≤–æ–∫
    const colorBets = document.querySelectorAll('.color-bet');
    if (colorBets.length === 0) {
        console.error('‚ùå –ö–Ω–æ–ø–∫–∏ —Å—Ç–∞–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        alert('–û—à–∏–±–∫–∞: –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ HTML.');
        return;
    }

    console.log('‚úÖ –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É...');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É
    const game = new RouletteGame();
    
    // –î–µ–ª–∞–µ–º –∏–≥—Ä—É –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    window.rouletteGame = game;
    
    console.log('‚úÖ –†—É–ª–µ—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    setInterval(() => {
        if (game.socket.connected) {
            console.log('üì° –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ');
        } else {
            console.log('‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ');
        }
    }, 5000);
});
