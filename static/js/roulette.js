// Telegram Casino JavaScript
console.log('üé∞ Casino JS –∑–∞–≥—Ä—É–∂–µ–Ω');

// –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let userBalance = 1000;
let isSpinning = false;
let userId = null;

// Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
let tg = null;
if (window.Telegram && window.Telegram.WebApp) {
    tg = window.Telegram.WebApp;
    tg.ready();
    tg.expand();
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
        userId = tg.initDataUnsafe.user.id;
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:', userId);
        loadUserBalance();
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    tg.MainButton.setText('üé∞ –ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É');
    tg.MainButton.hide();
}

// –ß–∏—Å–ª–∞ —Ä—É–ª–µ—Ç–∫–∏ –∏ –∏—Ö —Ü–≤–µ—Ç–∞
const ROULETTE_NUMBERS = {
    0: "green",
    1: "red", 2: "black", 3: "red", 4: "black", 5: "red", 6: "black",
    7: "red", 8: "black", 9: "red", 10: "black", 11: "black", 12: "red",
    13: "black", 14: "red", 15: "black", 16: "red", 17: "black", 18: "red",
    19: "red", 20: "black", 21: "red", 22: "black", 23: "red", 24: "black",
    25: "red", 26: "black", 27: "red", 28: "black", 29: "black", 30: "red",
    31: "black", 32: "red", 33: "black", 34: "red", 35: "black", 36: "red"
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserBalance() {
    if (!userId) return;
    
    try {
        const response = await fetch(`/api/user/${userId}`);
        if (response.ok) {
            const userData = await response.json();
            updateBalance(userData.balance);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
function updateBalance(newBalance) {
    userBalance = newBalance;
    const balanceElement = document.getElementById('balance');
    if (balanceElement) {
        balanceElement.textContent = newBalance;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        balanceElement.style.transform = 'scale(1.2)';
        balanceElement.style.color = '#FFD700';
        setTimeout(() => {
            balanceElement.style.transform = 'scale(1)';
            balanceElement.style.color = 'inherit';
        }, 300);
    }
}

// –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
function placeBet(color, amount) {
    console.log(`üéØ –°—Ç–∞–≤–∫–∞: ${color} - ${amount}‚≠ê`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    if (isSpinning) {
        showResult("‚è≥ –†—É–ª–µ—Ç–∫–∞ —É–∂–µ –∫—Ä—É—Ç–∏—Ç—Å—è!");
        return;
    }
    
    if (userBalance < amount) {
        showResult("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!");
        vibratePhone();
        return;
    }
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    isSpinning = true;
    disableAllButtons();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    showResult("üé∞ –ö—Ä—É—Ç–∏–º —Ä—É–ª–µ—Ç–∫—É...");
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä—É–ª–µ—Ç–∫—É
    spinRoulette(color, amount);
}

// –ê–Ω–∏–º–∞—Ü–∏—è —Ä—É–ª–µ—Ç–∫–∏
function spinRoulette(betColor, betAmount) {
    const wheel = document.getElementById('wheel');
    if (!wheel) return;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏
    wheel.classList.add('spinning');
    
    // –ó–≤—É–∫ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    playSpinSound();
    
    // –î–µ–ª–∞–µ–º API –∑–∞–ø—Ä–æ—Å
    fetch('/api/spin', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            user_id: userId,
            bet_type: betColor,
            bet_amount: betAmount
        })
    })
    .then(response => response.json())
    .then(data => {
        // –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        setTimeout(() => {
            processSpinResult(data, betColor, betAmount);
        }, 3000);
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞ API:', error);
        setTimeout(() => {
            // –õ–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            const localResult = generateLocalResult(betColor, betAmount);
            processSpinResult(localResult, betColor, betAmount);
        }, 3000);
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
function processSpinResult(data, betColor, betAmount) {
    const wheel = document.getElementById('wheel');
    const resultNumber = document.getElementById('result-number');
    
    if (wheel) wheel.classList.remove('spinning');
    if (resultNumber) resultNumber.textContent = data.result_number;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const won = data.won;
    const winnings = data.winnings || 0;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    if (won) {
        updateBalance(userBalance + winnings - betAmount);
        showWinResult(data.result_number, data.result_color, winnings);
        celebrateWin();
    } else {
        updateBalance(userBalance - betAmount);
        showLoseResult(data.result_number, data.result_color, betAmount);
        vibratePhone();
    }
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    setTimeout(() => {
        isSpinning = false;
        enableAllButtons();
    }, 2000);
}

// –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–∏–≥—Ä—ã—à–∞
function showWinResult(number, color, winnings) {
    const colorEmoji = getColorEmoji(color);
    const message = `üéâ –í–´–ò–ì–†–´–®! ${colorEmoji} ${number}\nüí∞ +${winnings}‚≠ê`;
    
    showResult(message, 'win');
    
    // Telegram haptic feedback
    if (tg && tg.HapticFeedback) {
        tg.HapticFeedback.impactOccurred('heavy');
    }
}

// –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–∞
function showLoseResult(number, color, lostAmount) {
    const colorEmoji = getColorEmoji(color);
    const message = `üòî –ü—Ä–æ–∏–≥—Ä—ã—à ${colorEmoji} ${number}\nüìâ -${lostAmount}‚≠ê`;
    
    showResult(message, 'lose');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ —Ü–≤–µ—Ç–∞
function getColorEmoji(color) {
    switch(color) {
        case 'red': return 'üî¥';
        case 'black': return '‚ö´';
        case 'green': return 'üü¢';
        default: return '‚ö™';
    }
}

// –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
function showResult(message, type = '') {
    const resultElement = document.getElementById('game-result');
if (resultElement) {
        resultElement.innerHTML = `<p>${message.replace('\n', '<br>')}</p>`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
        resultElement.className = `result ${type}`;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        resultElement.style.transform = 'scale(0.8)';
        resultElement.style.opacity = '0.5';
        setTimeout(() => {
            resultElement.style.transform = 'scale(1)';
            resultElement.style.opacity = '1';
        }, 100);
    }
}

// –õ–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (fallback)
function generateLocalResult(betColor, betAmount) {
    const resultNumber = Math.floor(Math.random() * 37); // 0-36
    const resultColor = getNumberColor(resultNumber);
    const won = betColor === resultColor;
    
    let winnings = 0;
    if (won) {
        winnings = resultColor === 'green' ? betAmount * 36 : betAmount * 2;
    }
    
    return {
        success: true,
        result_number: resultNumber,
        result_color: resultColor,
        won: won,
        winnings: winnings
    };
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —á–∏—Å–ª–∞
function getNumberColor(number) {
    if (number === 0) return 'green';
    const redNumbers = [1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36];
                return redNumbers.includes(number) ? 'red' : 'black';
            }

            // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫
            function disableAllButtons() {
                const buttons = document.querySelectorAll('.bet-btn');
                buttons.forEach(btn => {
                    btn.disabled = true;
                    btn.style.opacity = '0.5';
                });
            }

            // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫
            function enableAllButtons() {
                const buttons = document.querySelectorAll('.bet-btn');
                buttons.forEach(btn => {
                    btn.disabled = false;
                    btn.style.opacity = '1';
                });
            }

            // –ü—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞
            function celebrateWin() {
                const result = document.getElementById('game-result');
                if (result) {
                    result.classList.add('win-animation');
                    setTimeout(() => {
                        result.classList.remove('win-animation');
                    }, 1500);
                }
                
                if (tg && tg.showPopup) {
                    tg.showPopup({
                        title: 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!',
                        message: '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!',
                        buttons: [{type: 'ok'}]
                    });
                }
            }

            // –í–∏–±—Ä–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            function vibratePhone() {
                if (navigator.vibrate) {
                    navigator.vibrate([100, 50, 100]);
                }
                
                if (tg && tg.HapticFeedback) {
                    tg.HapticFeedback.impactOccurred('light');
                }
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
            document.addEventListener('DOMContentLoaded', function() {
                console.log('üé∞ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–≥—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                
                if (userId) {
                    loadUserBalance();
                }
                
                if (tg) {
                    tg.ready();
                    tg.expand();
                    tg.BackButton.hide();
                    
                    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
                    if (tg.themeParams.bg_color) {
                        document.body.style.backgroundColor = tg.themeParams.bg_color;
                    }
                }
            });

            console.log('‚úÖ Casino JS –∑–∞–≥—Ä—É–∂–µ–Ω');
        </script>
    </body>
    </html>
    '''
