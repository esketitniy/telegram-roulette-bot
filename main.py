import asyncio
import json
import random
import sqlite3
import os
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from flask import Flask, render_template, request, jsonify
import threading

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
WEB_APP_URL = os.getenv('WEB_APP_URL', 'https://telegram-casino.onrender.com')
PORT = int(os.getenv('PORT', 5000))

print(f"‚úÖ Bot Token: {'–ù–ê–ô–î–ï–ù' if BOT_TOKEN else '–ù–ï –ù–ê–ô–î–ï–ù'}")
print(f"‚úÖ Web App URL: {WEB_APP_URL}")
print(f"‚úÖ Port: {PORT}")

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
app.secret_key = os.getenv('SECRET_KEY', 'telegram-casino-secret')

# –†—É–ª–µ—Ç–∫–∞ - –µ–≤—Ä–æ–ø–µ–π—Å–∫–∞—è –≤–µ—Ä—Å–∏—è
ROULETTE_NUMBERS = {
    0: "green",
    1: "red", 2: "black", 3: "red", 4: "black", 5: "red", 6: "black",
    7: "red", 8: "black", 9: "red", 10: "black", 11: "black", 12: "red",
    13: "black", 14: "red", 15: "black", 16: "red", 17: "black", 18: "red",
    19: "red", 20: "black", 21: "red", 22: "black", 23: "red", 24: "black",
    25: "red", 26: "black", 27: "red", 28: "black", 29: "black", 30: "red",
    31: "black", 32: "red", 33: "black", 34: "red", 35: "black", 36: "red"
}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        conn = sqlite3.connect('casino.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                balance INTEGER DEFAULT 1000,
                total_games INTEGER DEFAULT 0,
                total_won INTEGER DEFAULT 0,
                total_lost INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS games (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                bet_type TEXT,
                bet_amount INTEGER,
                result_number INTEGER,
                result_color TEXT,
                won BOOLEAN,
                winnings INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")

# –§—É–Ω–∫—Ü–∏–∏ –ë–î
def get_user(user_id):
    try:
        conn = sqlite3.connect('casino.db')
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()
        conn.close()
        return user
    except:
        return None

def create_user(user_id, username, first_name):
    try:
        conn = sqlite3.connect('casino.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR IGNORE INTO users (user_id, username, first_name)
            VALUES (?, ?, ?)
        ''', (user_id, username, first_name))
        conn.commit()
        conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

def save_game(user_id, bet_type, bet_amount, result_number, result_color, won, winnings):
    try:
        conn = sqlite3.connect('casino.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO games (user_id, bet_type, bet_amount, result_number, result_color, won, winnings)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (user_id, bet_type, bet_amount, result_number, result_color, won, winnings))
        
        if won:
            cursor.execute('UPDATE users SET total_games = total_games + 1, total_won = total_won + ?, balance = balance + ? WHERE user_id = ?', (winnings, winnings - bet_amount, user_id))
        else:
            cursor.execute('UPDATE users SET total_games = total_games + 1, total_lost = total_lost + ?, balance = balance - ? WHERE user_id = ?', (bet_amount, bet_amount, user_id))
        
        conn.commit()
        conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä—ã: {e}")

# Flask routes
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/game')
def game():
    return render_template('game.html')

@app.route('/health')
def health():
    return jsonify({
        'status': 'healthy',
        'app': 'telegram-casino',
        'bot_configured': bool(BOT_TOKEN)
    })

@app.route('/api/user/<int:user_id>')
def get_user_info(user_id):
    user = get_user(user_id)
    if user:
        return jsonify({
            'user_id': user[0],
            'username': user[1],
            'first_name': user[2],
            'balance': user[3],
            'total_games': user[4],
            'total_won': user[5],
            'total_lost': user[6]
        })
    return jsonify({'error': 'User not found'}), 404

@app.route('/api/spin', methods=['POST'])
def spin_api():
    try:
        data = request.json
        user_id = data.get('user_id', 0)
        bet_type = data.get('bet_type')
        bet_amount = int(data.get('bet_amount'))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        if user_id:
            user = get_user(user_id)
            if user and user[3] < bet_amount:
                return jsonify({'error': 'Insufficient balance'}), 400
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_number = random.randint(0, 36)
        result_color = 'green' if result_number == 0 else ROULETTE_NUMBERS[result_number]
        
        # –†–∞—Å—á–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∞
        won = bet_type == result_color
        winnings = 0
        
        if won:
            winnings = bet_amount * 36 if result_color == 'green' else bet_amount * 2
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã
        if user_id:
            save_game(user_id, bet_type, bet_amount, result_number, result_color, won, winnings)
        
        return jsonify({
            'success': True,
            'result_number': result_number,
            'result_color': result_color,
            'won': won,
            'winnings': winnings,
            'bet_amount': bet_amount
        })
    
    except Exception as e:
        print(f"API Error: {e}")
        return jsonify({'error': str(e)}), 500

# Telegram Bot (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    create_user(user.id, user.username, user.first_name)
    
    keyboard = [
        [InlineKeyboardButton("üé∞ –ò–ì–†–ê–¢–¨ –í –†–£–õ–ï–¢–ö–£", web_app=WebAppInfo(url=f"{WEB_APP_URL}/game"))],
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ, {user.first_name}!\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: 1000 ‚≠ê",
        reply_markup=reply_markup
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "balance":
        user_data = get_user(query.from_user.id)
        balance = user_data[3] if user_data else 1000
        await query.edit_message_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚≠ê")

def run_bot():
    if not BOT_TOKEN:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(handle_callback))
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        application.run_polling()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
init_db()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
if BOT_TOKEN:
    bot_thread = threading.Thread(target=run_bot)
    bot_thread.daemon = True
    bot_thread.start()

# –î–ª—è Gunicorn
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=PORT, debug=False)
