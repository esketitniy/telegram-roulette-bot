import asyncio
import sqlite3
import json
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê"
WEB_APP_URL = "https://–≤–∞—à-–¥–æ–º–µ–Ω.com"  # URL –≤–∞—à–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('casino.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            balance INTEGER DEFAULT 1000,
            total_games INTEGER DEFAULT 0,
            total_won INTEGER DEFAULT 0,
            total_lost INTEGER DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∏–≥—Ä
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS games (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            bet_type TEXT,
            bet_amount INTEGER,
            result_number INTEGER,
            result_color TEXT,
            won BOOLEAN,
            winnings INTEGER,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY(user_id) REFERENCES users(user_id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            type TEXT,
            amount INTEGER,
            stars_amount INTEGER,
            status TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY(user_id) REFERENCES users(user_id)
        )
    ''')
    
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_user(user_id):
    conn = sqlite3.connect('casino.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user

def create_user(user_id, username, first_name):
    conn = sqlite3.connect('casino.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR IGNORE INTO users (user_id, username, first_name)
        VALUES (?, ?, ?)
    ''', (user_id, username, first_name))
    conn.commit()
    conn.close()

def update_balance(user_id, amount):
    conn = sqlite3.connect('casino.db')
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE users SET balance = balance + ? WHERE user_id = ?
    ''', (amount, user_id))
    conn.commit()
    conn.close()

def save_game(user_id, bet_type, bet_amount, result_number, result_color, won, winnings):
    conn = sqlite3.connect('casino.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO games (user_id, bet_type, bet_amount, result_number, result_color, won, winnings)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    ''', (user_id, bet_type, bet_amount, result_number, result_color, won, winnings))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if won:
        cursor.execute('''
            UPDATE users SET total_games = total_games + 1, total_won = total_won + ?
            WHERE user_id = ?
        ''', (winnings, user_id))
    else:
        cursor.execute('''
            UPDATE users SET total_games = total_games + 1, total_lost = total_lost + ?
            WHERE user_id = ?
        ''', (bet_amount, user_id))
    
    conn.commit()
    conn.close()

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    create_user(user.id, user.username, user.first_name)
    user_data = get_user(user.id)
    
    keyboard = [
        [InlineKeyboardButton("üé∞ –ò–ì–†–ê–¢–¨ –í –†–£–õ–ï–¢–ö–£", web_app=WebAppInfo(url=f"{WEB_APP_URL}/game"))],
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã", callback_data="buy_stars")],
        [InlineKeyboardButton("üí∏ –í—ã–≤–µ—Å—Ç–∏ –∑–≤–µ–∑–¥—ã", callback_data="withdraw_stars")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = f"""üé∞ –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í PREMIUM CASINO! üé∞

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

üî• –ï–í–†–û–ü–ï–ô–°–ö–ê–Ø –†–£–õ–ï–¢–ö–ê üî•
üíé –ò–≥—Ä–∞–π –∑–∞ Telegram Stars
‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã
üéØ –ß–µ—Å—Ç–Ω—ã–µ —à–∞–Ω—Å—ã

üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user_data[3] if user_data else 1000} ‚≠ê

üöÄ –ù–∞–∂–º–∏ "–ò–ì–†–ê–¢–¨" –¥–ª—è –∑–∞–ø—É—Å–∫–∞!"""
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "balance":
        await show_balance(query)
    elif query.data == "buy_stars":
        await buy_stars(query)
    elif query.data == "withdraw_stars":
        await withdraw_stars(query)
    elif query.data == "stats":
        await show_stats(query)

async def show_balance(query):
    user_data = get_user(query.from_user.id)
    
    text = f"""üí∞ –í–ê–® –ë–ê–õ–ê–ù–° üí∞

üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_data[3]} ‚≠ê
üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {user_data[4]}
üèÜ –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä–∞–Ω–æ: {user_data[5]} ‚≠ê
üìâ –í—Å–µ–≥–æ –ø—Ä–æ–∏–≥—Ä–∞–Ω–æ: {user_data[6]} ‚≠ê

üí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã!"""
    
    keyboard = [
        [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã", callback_data="buy_stars")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup)

async def buy_stars(query):
    text = """‚≠ê –ü–û–ö–£–ü–ö–ê TELEGRAM STARS ‚≠ê

üíé –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç:

üí∞ 100 Stars - 99‚ÇΩ
üíé 500 Stars - 449‚ÇΩ  
üî• 1000 Stars - 799‚ÇΩ
üëë 2500 Stars - 1899‚ÇΩ

–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥—ã –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å!"""
    
    keyboard = [
        [InlineKeyboardButton("üí∞ 100 Stars - 99‚ÇΩ", callback_data="buy_100")],
        [InlineKeyboardButton("üíé 500 Stars - 449‚ÇΩ", callback_data="buy_500")],
        [InlineKeyboardButton("üî• 1000 Stars - 799‚ÇΩ", callback_data="buy_1000")],
        [InlineKeyboardButton("üëë 2500 Stars - 1899‚ÇΩ", callback_data="buy_2500")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup)

async def withdraw_stars(query):
    user_data = get_user(query.from_user.id)
    balance = user_data[3]
    
    if balance < 100:
        text = f"""üí∏ –í–´–í–û–î –ó–í–ï–ó–î üí∏

‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞!

–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 100 ‚≠ê
–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚≠ê

–ò–≥—Ä–∞–π—Ç–µ –±–æ–ª—å—à–µ —á—Ç–æ–±—ã –Ω–∞–∫–æ–ø–∏—Ç—å –Ω—É–∂–Ω—É—é —Å—É–º–º—É!"""
    else:
        text = f"""üí∏ –í–´–í–û–î –ó–í–ï–ó–î üí∏

üí∞ –î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É: {balance} ‚≠ê
üíé –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥: 100 ‚≠ê
‚ö° –ö–æ–º–∏—Å—Å–∏—è: 5%

–ó–≤–µ–∑–¥—ã –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à Telegram –±–∞–ª–∞–Ω—Å –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç."""
    
    keyboard = [
        [InlineKeyboardButton("üí∏ –í—ã–≤–µ—Å—Ç–∏ 100 ‚≠ê", callback_data="withdraw_100")],
        [InlineKeyboardButton("üíé –í—ã–≤–µ—Å—Ç–∏ 500 ‚≠ê", callback_data="withdraw_500")],
        [InlineKeyboardButton("üî• –í—ã–≤–µ—Å—Ç–∏ –≤—Å—ë", callback_data="withdraw_all")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup)

async def show_stats(query):
    user_data = get_user(query.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä
    conn = sqlite3.connect('casino.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT bet_type, bet_amount, result_number, won, winnings, created_at
        FROM games 
        WHERE user_id = ? 
        ORDER BY created_at DESC 
        LIMIT 10
    ''', (query.from_user.id,))
    recent_games = cursor.fetchall()
    conn.close()
    
    win_rate = 0
    if user_data[4] > 0:  # total_games
        wins = len([g for g in recent_games if g[3]])  # won
        win_rate = (wins / min(len(recent_games), user_data[4])) * 100
    
    text = f"""üìä –í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê üìä

üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {user_data[4]}
üèÜ –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä–∞–Ω–æ: {user_data[5]} ‚≠ê
üìâ –í—Å–µ–≥–æ –ø—Ä–æ–∏–≥—Ä–∞–Ω–æ: {user_data[6]} ‚≠ê
üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {win_rate:.1f}%

üéØ –ü–û–°–õ–ï–î–ù–ò–ï –ò–ì–†–´:"""
    
    for game in recent_games[:5]:
        bet_type, bet_amount, result_number, won, winnings, created_at = game
        status = "‚úÖ –í—ã–∏–≥—Ä—ã—à" if won else "‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à"
        text += f"\n{status}: {bet_type} {bet_amount}‚≠ê ‚Üí {result_number}"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup)

def main():
    init_db()
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data))
    
    print("üé∞ Casino Bot –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()
